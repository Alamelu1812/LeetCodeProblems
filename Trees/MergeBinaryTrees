/*
 * Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are 
 * overlapped while the others are not.
 *
 * You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as 
 * the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.
 *
 */
 
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        //If both are null, return null
        if(t1==null && t2==null)
            return null;
            
        //If one is null and one is not, return the non-null element
        else if(t1 == null && t2!=null)
            return t2;
        else if(t1 != null && t2 == null)
            return t1;
            
        //If both are not null, create a new node by summing the values represented by the two nodes
        TreeNode root = new TreeNode(t1.val+t2.val);
        
        //Populate left and right by recursion
        root.left = mergeTrees(t1.left,t2.left);
        root.right = mergeTrees(t1.right,t2.right);
        
        //Return root node
        return root;
    }
}
